# Auto-generated using compose2nix v0.3.3-pre.
{
  pkgs,
  lib,
  config,
  ...
}: let
  dbPassword = "Ounce-Recliner8-Cattishly-Depress";
  rootDbPassword = "super_secure_password";
  user = "1000";
  group = "1000";
in {
  # Containers
  virtualisation.oci-containers.containers."booklore" = {
    image = "docker.io/booklore/booklore-app:latest";
    environment = {
      "DATABASE_PASSWORD" = dbPassword;
      "DATABASE_URL" = "jdbc:mariadb://mariadb:3306/booklore";
      "DATABASE_USERNAME" = "booklore";
      "PGID" = group;
      "PUID" = user;
      "SWAGGER_ENABLED" = "true";
      "TZ" = "America/New_York";
    };
    volumes = [
      "/tmp/booklore/bookdrop:/bookdrop:rw"
      "/mnt/media/media/EBooks:/books:rw"
      "/var/lib/booklore/data:/app/data:rw"
    ];
    ports = [
      "6060:6060/tcp"
    ];
    dependsOn = [
      "mariadb"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=booklore"
      "--network=booklore_default"
    ];
  };
  systemd.services."podman-booklore" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-booklore_default.service"
    ];
    requires = [
      "podman-network-booklore_default.service"
      "podman-booklore-mariadb.service"
    ];
    partOf = [
      "podman-compose-booklore-root.target"
    ];
    wantedBy = [
      "podman-compose-booklore-root.target"
    ];
  };
  virtualisation.oci-containers.containers."mariadb" = {
    image = "lscr.io/linuxserver/mariadb:11.4.5";
    environment = {
      "MYSQL_DATABASE" = "booklore";
      "MYSQL_PASSWORD" = dbPassword;
      "MYSQL_ROOT_PASSWORD" = rootDbPassword;
      "MYSQL_USER" = "booklore";
      "PGID" = group;
      "PUID" = user;
      "TZ" = "America/New_York";
    };
    volumes = [
      "/var/lib/booklore/mariadb/config:/config:rw"
    ];
    log-driver = "journald";
    extraOptions = [
      "--health-cmd=[\"mariadb-admin\", \"ping\", \"-h\", \"localhost\"]"
      "--health-interval=5s"
      "--health-retries=10"
      "--health-timeout=5s"
      "--network-alias=mariadb"
      "--network=booklore_default"
    ];
  };
  systemd.services."podman-booklore-mariadb" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
    };
    after = [
      "podman-network-booklore_default.service"
    ];
    requires = [
      "podman-network-booklore_default.service"
    ];
    partOf = [
      "podman-compose-booklore-root.target"
    ];
    wantedBy = [
      "podman-compose-booklore-root.target"
    ];
  };

  systemd.tmpfiles.settings.booklore = {
    "/var/lib/booklore/data"."d" = {
      mode = "700";
      inherit user group;
    };
    "/var/lib/booklore/mariadb/config"."d" = {
      mode = "700";
      inherit user group;
    };
  };

  # Networks
  systemd.services."podman-network-booklore_default" = {
    path = [pkgs.podman];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "podman network rm -f booklore_default";
    };
    script = ''
      podman network inspect booklore_default || podman network create booklore_default
    '';
    partOf = ["podman-compose-booklore-root.target"];
    wantedBy = ["podman-compose-booklore-root.target"];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."podman-compose-booklore-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = ["multi-user.target"];
  };
}
